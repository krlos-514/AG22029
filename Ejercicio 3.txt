section .data
    num1 dd 625
    num2 dd 5
    buffer db '000000', 0
    numStr db 6 dup(0), 0

section .bss

section .text
    global _start

_start:
    mov ecx, numStr
    mov byte [ecx], 0
    dec ecx
    
    mov eax, [num1]
    cdq
    idiv dword [num2]
    
    test edx, edx
    jz es_multiplo

no_es_multiplo:
    mov eax, [num1]
    cmp eax, [num2]
    je iguales
    
    different:
        mov eax, [num2]
        and eax, 1
        jz dividendo_par
        
        odd:
            mov eax, 100
            mov ebx, [num2]
            cdq
            idiv ebx
            convertir_decimal_StringDoI:
                mov edx, 0
                mov ebx, 10
                div ebx
                add dl, '0'
                mov [ecx], dl
                dec ecx
                test eax, eax
                jnz convertir_decimal_StringDoI
                int 0x80
                mov dl, '.'
                mov [ecx], dl
                dec ecx
            jmp end 
        
        dividendo_par:
                mov eax, [num1]
                and eax, 1
                jz divisor_par
                odd2:
                    mov eax, 100
                    mov ebx, [num2]
                    cdq
                    idiv ebx
                    convertir_decimal_StringDrI:
                        mov edx, 0
                        mov ebx, 10
                        div ebx
                        add dl, '0'
                        mov [ecx], dl
                        dec ecx
                        test eax, eax
                        jnz convertir_decimal_StringDrI
                        int 0x80
                        mov dl, '.'
                        mov [ecx], dl
                        dec ecx
                    jmp end
                    
                
                divisor_par:
                    mov edx, '.00'
                    mov [ecx], edx
                    dec ecx
                    jmp end
 
    iguales:
        mov edx, '.00'
        mov [ecx], edx
        dec ecx
        jmp end
    

es_multiplo:
    mov edx, '.00'
    mov [ecx], edx
    dec ecx
    jmp end
    
   
end:
    int 0x80
    
    mov eax, [num1]
    mov ebx, [num2]
    cdq
    idiv ebx
    
  

.convertir_a_String:
    mov edx, 0
    mov ebx, 10
    div ebx
    add dl, '0'
    mov [ecx], dl
    dec ecx
    test eax, eax
    jnz .convertir_a_String
    int 0x80
    
    
    inc ecx
    int 0x80
    
    mov eax, 4
    mov ebx, 1
    mov edx, 6
    lea ecx, [ecx]
    int 0x80
    
    mov eax,1
    mov ebx,0
    int 0x80
    